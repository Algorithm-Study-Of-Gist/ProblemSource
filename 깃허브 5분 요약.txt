1. 깃허브가 뭐하는 친구일까?

- 버전관리에 정말정말 용이한 프로그램!
- 누가 어느 코드를 언제 고쳤는지까지 세세하게 다 나온다.
- 개발자들끼리 협업할 때 필수템

2. git bash 기본 사용법

git bash는 Linux 터미널과 거의 비슷한 환경을 제공해주는 shell이다. (짱편함)

- git bash 설치

- git clone [리포지토리 주소] (현재 디렉토리에 주소에 있는 리포지토리 복사)
- git branch [브랜치 이름] (브랜치 생성, 브랜치 이름이 없다면 현재 깃에 있는 브랜치 목록을 보여줌)
- git checkout [브랜치 이름] (선택한 브랜치로 변경)

- git add [디렉토리] (설정한 디렉토리 내에서 변경된 모든 점을 업데이트해준다.)
- git commit (add를 통해 업데이트된 내용들을 적용시킨다. commit 메시지가 없다면 commit은 취소되니 뭐라도 적자.) 
=> 보통 커밋 메시지는 동사로 시작함. (ex. 'Fix' line #233~235, 'Upload' solution for #1234, ....)

- git push (git --set-upstream origin 뭐시기 나오는 설정들 입력해주고, 깃헙 아이디 비번 입력하면 자기 아이디로 변경사항을 깃헙에 저장 가능)

(혹시라도 user name이나 user email치라는거 나오면 그건 어차피 깃허브에서 쓸 거 아니니까 아무거나 적어도 됨)
이 정도만 알아도 큰 지장은 없겠지만... 호오오오오오오옥시 깃이 뭐하는 친구인지 저어어엉말 궁금하다면 무리하지 말고 시간이 남아돌때
https://missing.csail.mit.edu/2020/version-control/ <= 여기 홈페이지 들어가서 보시길. 따끈따끈한 mit 2019 겨울학기 보충수업~~

3. 깃허브 리포지토리 사용하는 팁

- branch는 버전마다 하나씩 있어야 하긴 하지만.. 적어도 마스터 브랜치로 전부 땨려박진 말자
- 같은 문제를 풀었으면 같은 폴더 안에 넣어놓자. 
    너무 흩어져있어서 누가 무슨 문제를 풀었는지 모르겠다.
    1234_chayhyeon.c 이런식으로 파일 형식을 통일하는 것도 방법.
    ps_ 이거 앞에 붙인건 GAS 스터디에서 알고리즘 말고 다른 것도 하려고 올린거라 굳이 붙일 필요는 없다.
    여튼 통일성이 중요하지! 스터디 이름도 지어보고, 이런 규칙들도 몇 가지 정해보자.